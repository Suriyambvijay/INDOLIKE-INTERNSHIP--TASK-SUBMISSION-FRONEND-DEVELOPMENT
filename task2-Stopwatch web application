<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stopwatch with Video Background</title>
    <style>
        /* General Styles */
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            overflow: hidden;
            position: relative;
        }

        /* Video Background */
        #video-background {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            z-index: -1;
        }

        /* Stopwatch Container */
        .stopwatch {
            text-align: center;
            background: rgba(255, 255, 255, 0.1);
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(253, 4, 4, 0.1);
            z-index: 1;
        }

        /* Display */
        .display {
            font-size: 3rem;
            margin-bottom: 20px;
            color: #fff;
            text-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
        }

        /* Buttons */
        .buttons button {
            font-size: 1rem;
            padding: 10px 20px;
            margin: 5px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            background-color: rgba(255, 255, 255, 0.2);
            color: #fff;
            transition: background-color 0.3s ease;
        }

        .buttons button:hover {
            background-color: rgba(255, 255, 255, 0.3);
        }

        .buttons button:active {
            background-color: rgba(255, 255, 255, 0.1);
        }

        /* Lap List */
        .laps {
            margin-top: 20px;
            text-align: left;
            max-height: 150px;
            overflow-y: auto;
            color: #fff;
        }

        .laps ul {
            list-style-type: none;
            padding: 0;
        }

        .laps ul li {
            padding: 5px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
    </style>
</head>
<body>
    <!-- Video Background -->
    <video id="video-background" autoplay muted loop>
        <source src="background.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

    <!-- Stopwatch Container -->
    <div class="stopwatch">
        <!-- Display -->
        <div class="display" id="display">00:00:00</div>

        <!-- Buttons -->
        <div class="buttons">
            <button id="startStop">Start</button>
            <button id="lapReset">Lap</button>
        </div>

        <!-- Lap List -->
        <div class="laps">
            <h3>Laps</h3>
            <ul id="laps"></ul>
        </div>
    </div>

    <script>
        // Variables
        let startTime;
        let elapsedTime = 0;
        let timerInterval;
        let isRunning = false;
        
        // DOM Elements
        const display = document.getElementById('display');
        const startStopButton = document.getElementById('startStop');
        const lapResetButton = document.getElementById('lapReset');
        const lapsList = document.getElementById('laps');
        
        // Format Time
        function formatTime(time) {
            const hours = Math.floor(time / 3600000).toString().padStart(2, '0');
            const minutes = Math.floor((time % 3600000) / 60000).toString().padStart(2, '0');
            const seconds = Math.floor((time % 60000) / 1000).toString().padStart(2, '0');
            const milliseconds = Math.floor((time % 1000) / 10).toString().padStart(2, '0');
            return `${hours}:${minutes}:${seconds}`;
        }
        
        // Update Display
        function updateDisplay() {
            const currentTime = Date.now() - startTime + elapsedTime;
            display.textContent = formatTime(currentTime);
        }
        
        // Start/Stop Functionality
        function startStop() {
            if (isRunning) {
                clearInterval(timerInterval);
                elapsedTime += Date.now() - startTime;
                startStopButton.textContent = 'Start';
                lapResetButton.textContent = 'Reset';
            } else {
                startTime = Date.now();
                timerInterval = setInterval(updateDisplay, 10);
                startStopButton.textContent = 'Stop';
                lapResetButton.textContent = 'Lap';
            }
            isRunning = !isRunning;
        }
        
        // Lap/Reset Functionality
        function lapReset() {
            if (isRunning) {
                // Add Lap
                const lapTime = Date.now() - startTime + elapsedTime;
                const lapItem = document.createElement('li');
                lapItem.textContent = formatTime(lapTime);
                lapsList.appendChild(lapItem);
            } else {
                // Reset
                clearInterval(timerInterval);
                display.textContent = '00:00:00';
                elapsedTime = 0;
                lapsList.innerHTML = '';
                lapResetButton.textContent = 'Lap';
            }
        }
        
        // Event Listeners
        startStopButton.addEventListener('click', startStop);
        lapResetButton.addEventListener('click', lapReset);
        </script>
</body>
</html>
